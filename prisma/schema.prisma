// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  INFOGRAPHE
  COMMERCIAL
}

model User {
  id                 String   @id
  email              String   @unique
  role               UserRole @default(COMMERCIAL)
  name               String
  emailVerified      Boolean
  image              String?
  timezone           String    @default("UTC")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?
  isActive           Boolean   @default(true)
  
  platformConnections PlatformConnection[]
  posts              Post[]
  brands             UserBrand[] // Many-to-many relationship with brands
  sessions           Session[]
  accounts           Account[]

  @@index([email], map: "user_email_index")
  @@unique([email], map: "user_email_unique")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  passwordChangeRequired Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  isActive    Boolean   @default(true)
  users       UserBrand[] // Many-to-many relationship with users
  posts       Post[]
  wigs        Wig[]

  @@index([name])
}

// Junction table for User-Brand many-to-many relationship
model UserBrand {
  userId    String
  brandId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, brandId])
}

model Post {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brandId      String
  brand        Brand    @relation(fields: [brandId], references: [id])
  content      String
  mediaUrls    Json?
  status       PostStatus
  scheduledFor DateTime?
  wigId        String?
  wig          Wig?     @relation(fields: [wigId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  platformPosts PlatformPost[]
  sharedBy      SharedPost[]

  @@index([userId, brandId, status])
}

enum PostStatus {
  DRAFT       // Created by Infographe
  PENDING     // Waiting for Commercial approval
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
  ARCHIVED
  DELETED
}

model PlatformConnection {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform           Platform
  accessToken        String
  tokenExpiry        DateTime
  platformAccountId  String
  platformAccountName String
  metadata           Json?
  posts              PlatformPost[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([userId, platform, platformAccountId])
  @@index([userId, platform])
}

model PlatformPost {
  id                  String   @id @default(cuid())
  postId              String
  post                Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  platformConnectionId String
  platformConnection  PlatformConnection @relation(fields: [platformConnectionId], references: [id], onDelete: Cascade)
  platformPostId      String?  // ID returned by the platform API
  status             PostStatus
  errorMessage       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([postId, platformConnectionId])
}

enum Platform {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITTER
  LINKEDIN
}

model Wig {
  id          String   @id @default(cuid())
  name        String
  description String?
  brandId     String
  brand       Brand    @relation(fields: [brandId], references: [id])
  basePrice   Decimal  @db.Decimal(10, 2)
  currencyId  String   @default("USD")
  currency    Currency @relation(fields: [currencyId], references: [id])
  colorId     String
  color       WigColor @relation(fields: [colorId], references: [id])
  sizeId      String
  size        WigSize  @relation(fields: [sizeId], references: [id])
  qualityId   String?   @default(cuid())
  quality     WigQuality? @relation(fields: [qualityId], references: [id])
  imageUrls   Json? 
  status      WigStatus @default(DRAFT)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([brandId, colorId, sizeId, qualityId])
}

model Currency {
  id           String   @id // e.g., "USD", "EUR"
  name         String   // e.g., "US Dollar", "Euro"
  symbol       String   // e.g., "$", "â‚¬"
  rate         Decimal  @db.Decimal(10, 6) // Exchange rate relative to base currency
  isBase       Boolean  @default(false)
  lastUpdated  DateTime @default(now())
  wigs         Wig[]
  
  @@unique([name])
}

model WigColor {
  id          String   @id @default(cuid())
  name        String   @unique
  hexCode     String?  // Color hex code
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wigs        Wig[]
}

model WigSize {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Small", "Medium", "Large"
  description String?
  orderIndex  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wigs        Wig[]

  @@index([orderIndex])
}

enum WigStatus {
  DRAFT
  ACTIVE
  DISCONTINUED
  ARCHIVED
}

model PendingUser {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
}

model SharedPost {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  sharedAt  DateTime @default(now())

  @@unique([postId, userId])
  @@index([userId])
}

model WigQuality {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Premium", "Standard", "Economy"
  description String?
  orderIndex  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wigs        Wig[]

  @@index([orderIndex])
}